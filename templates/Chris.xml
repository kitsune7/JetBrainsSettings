<templateSet group="Chris">
  <template name="html" value="&lt;!doctype html&gt;&#10;&lt;html&gt;&#10;&lt;head lang=&quot;en&quot;&gt;&#10;    &lt;meta charset=&quot;utf-8&quot; /&gt;&#10;    &lt;title&gt;&lt;/title&gt;&#10;    &lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="New html5 document" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="reset" value="/* &#10;html5doctor.com Reset Stylesheet&#10;v1.6.1&#10;Last Updated: 2010-09-17&#10;Author: Richard Clark - http://richclarkdesign.com &#10;Twitter: @rich_clark&#10;*/&#10;&#10;html, body, div, span, object, iframe,&#10;h1, h2, h3, h4, h5, h6, p, blockquote, pre,&#10;abbr, address, cite, code,&#10;del, dfn, em, img, ins, kbd, q, samp,&#10;small, strong, sub, sup, var,&#10;b, i,&#10;dl, dt, dd, ol, ul, li,&#10;fieldset, form, label, legend,&#10;table, caption, tbody, tfoot, thead, tr, th, td,&#10;article, aside, canvas, details, figcaption, figure, &#10;footer, header, hgroup, menu, nav, section, summary,&#10;time, mark, audio, video {&#10;    margin:0;&#10;    padding:0;&#10;    border:0;&#10;    outline:0;&#10;    font-size:100%;&#10;    vertical-align:baseline;&#10;    background:transparent;&#10;}&#10;&#10;body {&#10;    line-height:1;&#10;}&#10;&#10;article,aside,details,figcaption,figure,&#10;footer,header,hgroup,menu,nav,section { &#10;    display:block;&#10;}&#10;&#10;nav ul {&#10;    list-style:none;&#10;}&#10;&#10;blockquote, q {&#10;    quotes:none;&#10;}&#10;&#10;blockquote:before, blockquote:after,&#10;q:before, q:after {&#10;    content:'';&#10;    content:none;&#10;}&#10;&#10;a {&#10;    margin:0;&#10;    padding:0;&#10;    font-size:100%;&#10;    vertical-align:baseline;&#10;    background:transparent;&#10;}&#10;&#10;/* change colours to suit your needs */&#10;ins {&#10;    background-color:#ff9;&#10;    color:#000;&#10;    text-decoration:none;&#10;}&#10;&#10;/* change colours to suit your needs */&#10;mark {&#10;    background-color:#ff9;&#10;    color:#000; &#10;    font-style:italic;&#10;    font-weight:bold;&#10;}&#10;&#10;del {&#10;    text-decoration: line-through;&#10;}&#10;&#10;abbr[title], dfn[title] {&#10;    border-bottom:1px dotted;&#10;    cursor:help;&#10;}&#10;&#10;table {&#10;    border-collapse:collapse;&#10;    border-spacing:0;&#10;}&#10;&#10;/* change border colour to suit your needs */&#10;hr {&#10;    display:block;&#10;    height:1px;&#10;    border:0;   &#10;    border-top:1px solid #cccccc;&#10;    margin:1em 0;&#10;    padding:0;&#10;}&#10;&#10;input, select {&#10;    vertical-align:middle;&#10;}" description="CSS Reset" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="true" />
    </context>
  </template>
  <template name="tsc" value="import React, { Component, ReactElement } from 'react'&#10;import './style.css'&#10;&#10;class $NAME$ extends Component {&#10;  render (): ReactElement {&#10;    return (&#10;      &lt;div&gt;&lt;/div&gt;&#10;    )&#10;  }&#10;}&#10;&#10;export default $NAME$&#10;" description="New typescript component" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="model" value="class $NAME$ {&#10;  &#10;}&#10;&#10;export default $NAME$&#10;" description="New model class" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="set" value="public set $VAR$ ($VAR$: $TYPE$) {&#10;  this._$VAR$ = $VAR$&#10;}&#10;" description="New set method" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="sg" value="public set $VAR$ ($VAR$: $TYPE$) {&#10;  this._$VAR$ = $VAR$&#10;}&#10;public get $VAR$ (): $TYPE$ {&#10;  return this._$VAR$&#10;}&#10;" description="A setter and getter method back to back" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="mem" value="private _$VAR$: $TYPE$&#10;" description="New private member" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fc" value="import * as React from 'react'&#10;import './styles.css'&#10;&#10;interface PropTypes {&#10;  &#10;}&#10;&#10;const $NAME$ = (props: PropTypes): JSX.Element =&gt; (&#10;  $JSX$&#10;)&#10;&#10;export default $NAME$&#10;" description="Functional Component" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="JSX" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="for" value="for (let i = 0; i &lt; $SOMETHING$.length; i++) {&#10;  &#10;}" description="Typescript for loop" toReformat="false" toShortenFQNames="true">
    <variable name="SOMETHING" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="css" value="import './style.css'" description="import css file" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="inter" value="interface $NAME$ {&#10;  &#10;}&#10;&#10;export default $NAME$&#10;" description="New interface file" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cc" value="import React, { Component } from 'react'&#10;import PropTypes from 'prop-types'&#10;&#10;import styles from './style'&#10;&#10;class $NAME$ extends Component {&#10;  static propTypes = {&#10;    style: PropTypes.object&#10;  }&#10;&#10;  render () {&#10;    return (&#10;      &#10;    )&#10;  }&#10;}&#10;&#10;export default $NAME$" description="Common component" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ss" value="import { StyleSheet } from 'react-native'&#10;// import {  } from '../colors'&#10;&#10;const styles = StyleSheet.create({&#10;  &#10;})&#10;&#10;export default styles&#10;" description="React native stylesheet" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="in" value="import $NAME$ from './$NAME$'&#10;export default $NAME$&#10;" description="New index.js file" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ex" value="export { default as $NAME$ } from './$NAME$'&#10;" description="Export default from" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rnc" value="import React, { Component } from 'react'&#10;import PropTypes from 'prop-types'&#10;import styles from './style'&#10;&#10;class $NAME$ extends Component {&#10;  static propTypes = {&#10;    style: PropTypes.object&#10;  }&#10;  &#10;  static defaultProps = {&#10;    style: {}&#10;  }&#10;  &#10;  render () {&#10;    return (&#10;      $JSX$&#10;    )&#10;  }&#10;}&#10;&#10;export default $NAME$&#10;" description="React native component" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="JSX" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="var" value="var(--$VAR$)" description="css variable" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="CSS" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cl" value="console.log($VALUE$)" description="console.log" toReformat="false" toShortenFQNames="true">
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cons" value="constructor () {&#10;  super()&#10;}" description="Constructor" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="normal" value="/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */&#10;&#10;/* Document&#10;   ========================================================================== */&#10;&#10;/**&#10; * 1. Correct the line height in all browsers.&#10; * 2. Prevent adjustments of font size after orientation changes in iOS.&#10; */&#10;&#10;html {&#10;    line-height: 1.15; /* 1 */&#10;    -webkit-text-size-adjust: 100%; /* 2 */&#10;}&#10;&#10;/* Sections&#10;   ========================================================================== */&#10;&#10;/**&#10; * Remove the margin in all browsers.&#10; */&#10;&#10;body {&#10;    margin: 0;&#10;}&#10;&#10;/**&#10; * Render the `main` element consistently in IE.&#10; */&#10;&#10;main {&#10;    display: block;&#10;}&#10;&#10;/**&#10; * Correct the font size and margin on `h1` elements within `section` and&#10; * `article` contexts in Chrome, Firefox, and Safari.&#10; */&#10;&#10;h1 {&#10;    font-size: 2em;&#10;    margin: 0.67em 0;&#10;}&#10;&#10;/* Grouping content&#10;   ========================================================================== */&#10;&#10;/**&#10; * 1. Add the correct box sizing in Firefox.&#10; * 2. Show the overflow in Edge and IE.&#10; */&#10;&#10;hr {&#10;    box-sizing: content-box; /* 1 */&#10;    height: 0; /* 1 */&#10;    overflow: visible; /* 2 */&#10;}&#10;&#10;/**&#10; * 1. Correct the inheritance and scaling of font size in all browsers.&#10; * 2. Correct the odd `em` font sizing in all browsers.&#10; */&#10;&#10;pre {&#10;    font-family: monospace, monospace; /* 1 */&#10;    font-size: 1em; /* 2 */&#10;}&#10;&#10;/* Text-level semantics&#10;   ========================================================================== */&#10;&#10;/**&#10; * Remove the gray background on active links in IE 10.&#10; */&#10;&#10;a {&#10;    background-color: transparent;&#10;}&#10;&#10;/**&#10; * 1. Remove the bottom border in Chrome 57-&#10; * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.&#10; */&#10;&#10;abbr[title] {&#10;    border-bottom: none; /* 1 */&#10;    text-decoration: underline; /* 2 */&#10;    text-decoration: underline dotted; /* 2 */&#10;}&#10;&#10;/**&#10; * Add the correct font weight in Chrome, Edge, and Safari.&#10; */&#10;&#10;b,&#10;strong {&#10;    font-weight: bolder;&#10;}&#10;&#10;/**&#10; * 1. Correct the inheritance and scaling of font size in all browsers.&#10; * 2. Correct the odd `em` font sizing in all browsers.&#10; */&#10;&#10;code,&#10;kbd,&#10;samp {&#10;    font-family: monospace, monospace; /* 1 */&#10;    font-size: 1em; /* 2 */&#10;}&#10;&#10;/**&#10; * Add the correct font size in all browsers.&#10; */&#10;&#10;small {&#10;    font-size: 80%;&#10;}&#10;&#10;/**&#10; * Prevent `sub` and `sup` elements from affecting the line height in&#10; * all browsers.&#10; */&#10;&#10;sub,&#10;sup {&#10;    font-size: 75%;&#10;    line-height: 0;&#10;    position: relative;&#10;    vertical-align: baseline;&#10;}&#10;&#10;sub {&#10;    bottom: -0.25em;&#10;}&#10;&#10;sup {&#10;    top: -0.5em;&#10;}&#10;&#10;/* Embedded content&#10;   ========================================================================== */&#10;&#10;/**&#10; * Remove the border on images inside links in IE 10.&#10; */&#10;&#10;img {&#10;    border-style: none;&#10;}&#10;&#10;/* Forms&#10;   ========================================================================== */&#10;&#10;/**&#10; * 1. Change the font styles in all browsers.&#10; * 2. Remove the margin in Firefox and Safari.&#10; */&#10;&#10;button,&#10;input,&#10;optgroup,&#10;select,&#10;textarea {&#10;    font-family: inherit; /* 1 */&#10;    font-size: 100%; /* 1 */&#10;    line-height: 1.15; /* 1 */&#10;    margin: 0; /* 2 */&#10;}&#10;&#10;/**&#10; * Show the overflow in IE.&#10; * 1. Show the overflow in Edge.&#10; */&#10;&#10;button,&#10;input { /* 1 */&#10;    overflow: visible;&#10;}&#10;&#10;/**&#10; * Remove the inheritance of text transform in Edge, Firefox, and IE.&#10; * 1. Remove the inheritance of text transform in Firefox.&#10; */&#10;&#10;button,&#10;select { /* 1 */&#10;    text-transform: none;&#10;}&#10;&#10;/**&#10; * Correct the inability to style clickable types in iOS and Safari.&#10; */&#10;&#10;button,&#10;[type=&quot;button&quot;],&#10;[type=&quot;reset&quot;],&#10;[type=&quot;submit&quot;] {&#10;    -webkit-appearance: button;&#10;}&#10;&#10;/**&#10; * Remove the inner border and padding in Firefox.&#10; */&#10;&#10;button::-moz-focus-inner,&#10;[type=&quot;button&quot;]::-moz-focus-inner,&#10;[type=&quot;reset&quot;]::-moz-focus-inner,&#10;[type=&quot;submit&quot;]::-moz-focus-inner {&#10;    border-style: none;&#10;    padding: 0;&#10;}&#10;&#10;/**&#10; * Restore the focus styles unset by the previous rule.&#10; */&#10;&#10;button:-moz-focusring,&#10;[type=&quot;button&quot;]:-moz-focusring,&#10;[type=&quot;reset&quot;]:-moz-focusring,&#10;[type=&quot;submit&quot;]:-moz-focusring {&#10;    outline: 1px dotted ButtonText;&#10;}&#10;&#10;/**&#10; * Correct the padding in Firefox.&#10; */&#10;&#10;fieldset {&#10;    padding: 0.35em 0.75em 0.625em;&#10;}&#10;&#10;/**&#10; * 1. Correct the text wrapping in Edge and IE.&#10; * 2. Correct the color inheritance from `fieldset` elements in IE.&#10; * 3. Remove the padding so developers are not caught out when they zero out&#10; *    `fieldset` elements in all browsers.&#10; */&#10;&#10;legend {&#10;    box-sizing: border-box; /* 1 */&#10;    color: inherit; /* 2 */&#10;    display: table; /* 1 */&#10;    max-width: 100%; /* 1 */&#10;    padding: 0; /* 3 */&#10;    white-space: normal; /* 1 */&#10;}&#10;&#10;/**&#10; * Add the correct vertical alignment in Chrome, Firefox, and Opera.&#10; */&#10;&#10;progress {&#10;    vertical-align: baseline;&#10;}&#10;&#10;/**&#10; * Remove the default vertical scrollbar in IE 10+.&#10; */&#10;&#10;textarea {&#10;    overflow: auto;&#10;}&#10;&#10;/**&#10; * 1. Add the correct box sizing in IE 10.&#10; * 2. Remove the padding in IE 10.&#10; */&#10;&#10;[type=&quot;checkbox&quot;],&#10;[type=&quot;radio&quot;] {&#10;    box-sizing: border-box; /* 1 */&#10;    padding: 0; /* 2 */&#10;}&#10;&#10;/**&#10; * Correct the cursor style of increment and decrement buttons in Chrome.&#10; */&#10;&#10;[type=&quot;number&quot;]::-webkit-inner-spin-button,&#10;[type=&quot;number&quot;]::-webkit-outer-spin-button {&#10;    height: auto;&#10;}&#10;&#10;/**&#10; * 1. Correct the odd appearance in Chrome and Safari.&#10; * 2. Correct the outline style in Safari.&#10; */&#10;&#10;[type=&quot;search&quot;] {&#10;    -webkit-appearance: textfield; /* 1 */&#10;    outline-offset: -2px; /* 2 */&#10;}&#10;&#10;/**&#10; * Remove the inner padding in Chrome and Safari on macOS.&#10; */&#10;&#10;[type=&quot;search&quot;]::-webkit-search-decoration {&#10;    -webkit-appearance: none;&#10;}&#10;&#10;/**&#10; * 1. Correct the inability to style clickable types in iOS and Safari.&#10; * 2. Change font properties to `inherit` in Safari.&#10; */&#10;&#10;::-webkit-file-upload-button {&#10;    -webkit-appearance: button; /* 1 */&#10;    font: inherit; /* 2 */&#10;}&#10;&#10;/* Interactive&#10;   ========================================================================== */&#10;&#10;/*&#10; * Add the correct display in Edge, IE 10+, and Firefox.&#10; */&#10;&#10;details {&#10;    display: block;&#10;}&#10;&#10;/*&#10; * Add the correct display in all browsers.&#10; */&#10;&#10;summary {&#10;    display: list-item;&#10;}&#10;&#10;/* Misc&#10;   ========================================================================== */&#10;&#10;/**&#10; * Add the correct display in IE 10+.&#10; */&#10;&#10;template {&#10;    display: none;&#10;}&#10;&#10;/**&#10; * Add the correct display in IE 10.&#10; */&#10;&#10;[hidden] {&#10;    display: none;&#10;}&#10;" description="Normalize.css" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="true" />
    </context>
  </template>
  <template name="--" value="/* -------------------------------------------------------------------------------- */" description="Comment divider" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="-c" value="/* $HEADER$ */" description="multi-line-comment style one-liner" toReformat="false" toShortenFQNames="true">
    <variable name="HEADER" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="CSS" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="vj" value="(function () {&#10;  &#10;}())&#10;" description="New vanilla javascript file" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="wc" value="/* global HTMLElement */&#10;&#10;const css = `&#10;  &lt;style&gt;&#10;    :host([hidden]) { display: none; }&#10;    :host {&#10;      display: block;&#10;    }&#10;  &lt;/style&gt;&#10;`&#10;&#10;const html = ``&#10;&#10;class $NAME$ extends HTMLElement {&#10;  static get observedAttributes () {&#10;    return []&#10;  }&#10;&#10;  constructor () {&#10;    super()&#10;&#10;    this.attachShadow({mode: 'open'})&#10;    this.shadowRoot.appendChild(template.content.cloneNode(true))&#10;  }&#10;&#10;  connectedCallback () {}&#10;&#10;  disconnectedCallback () {}&#10;&#10;  attributeChangedCallback (name, oldValue, newValue) {}&#10;}&#10;&#10;const template = document.createElement('template')&#10;template.innerHTML = `${css}${html}`&#10;&#10;window.customElements.define('$KEBAB_NAME$', $NAME$)&#10;" description="New web component" toReformat="false" toShortenFQNames="true">
    <variable name="KEBAB_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="gs" value="get $VAR$ () {&#10;  return this.$VAR$&#10;}&#10;set $VAR$ (newValue) {&#10;  this.$VAR$ = newValue&#10;}" description="Getter setter" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="imj" value="import { toJS } from 'mobx'" description="import toJS" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ve" value="const { $VARS$ } = $OBJECT$" description="Variable expansion" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VARS" expression="" defaultValue="this.props" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ts-" value="// @ts-ignore" description="ts-ignore" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="change" value="(event: React.ChangeEvent): void =&gt; {&#10;  const target = event.target as HTMLInputElement&#10;}" description="Change event function" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="redu" value="reduce((previousValue, $NAME$) =&gt; {&#10;  return $SOMETHING$&#10;})&#10;" description="New reduce function" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SOMETHING" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="im" value="import $COMPONENT$ from './$COMPONENT$'" description="import default export component" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="onc" value="onClick = (event: React.MouseEvent): void =&gt; {&#10;  event.preventDefault()&#10;  const target = event.target as HTMLElement&#10;}" description="onclick handler" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="tp" value="type Props = {&#10;  &#10;}" description="type Props definition" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="obs" value="import { observer } from 'mobx-react'&#10;@observer&#10;// @ts-ignore" description="Make the class an observer" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="post" value="router.post(&#10;  '/api/$ROUTE$',&#10;  async (req: express.Request, res: express.Response) =&gt; {&#10;    const token: string = getAuthToken(req)&#10;    if (token) {&#10;      res.json(await apiRouteHandler.$ROUTE$(token))&#10;    } else {&#10;      const errorCode = 1003&#10;      res.json({&#10;        code: errorCode,&#10;        error: errorCodes[errorCode]&#10;      })&#10;    }&#10;  }&#10;)" description="New post route" toReformat="false" toShortenFQNames="true">
    <variable name="ROUTE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="style" value="import html from '../../html.js'&#10;&#10;const style = html`&#10;  &lt;style&gt;&lt;/style&gt;&#10;`&#10;&#10;export default style&#10;" description="New style tag" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rc" value="import { Component } from '../../../$COMPONENTS_PATH$web_modules/react.js'&#10;import html from '../../$COMPONENTS_PATH$html.js'&#10;&#10;class $NAME$ extends Component {&#10;  render() {&#10;    return html`&#10;      &lt;div&gt;&lt;/div&gt;&#10;    `&#10;  }&#10;}&#10;&#10;export default $NAME$&#10;" description="New react component" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENTS_PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="construct" value="constructor() {&#10;  super()&#10;&#10;  this.$FUNCTION$ = () =&gt; {}&#10;}" description="New constructor" toReformat="false" toShortenFQNames="true">
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="test" value="import React from 'react'&#10;import { render } from '@testing-library/react'&#10;import $COMPONENT$ from './$COMPONENT$'&#10;&#10;function getContainer(): HTMLElement {&#10;  return render(&lt;$COMPONENT$ /&gt;).container&#10;}&#10;&#10;test('', () =&gt; {&#10;  const container = getContainer()&#10;  expect(container).toBe(true)&#10;})&#10;" description="New test file" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="imcommon" value="import { $VAR$ } from 'common'" description="import from common" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nt" value="test('$DESCRIPTION$', () =&gt; {&#10;  const container = getContainer()&#10;  expect(container).toBe(true)&#10;})" description="New test function" toReformat="false" toShortenFQNames="true">
    <variable name="DESCRIPTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="jsc" value="import React, { Component } from 'react'&#10;import DesignView from '../DesignView'&#10;import './style.css'&#10;&#10;class $NAME$ extends Component {&#10;  render () {&#10;    return (&#10;      &lt;DesignView&gt;&#10;        &lt;div&gt;&lt;/div&gt;&#10;      &lt;/DesignView&gt;&#10;    )&#10;  }&#10;}&#10;&#10;export default $NAME$&#10;" description="New React Component (JSX)" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ECMAScript6" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JADE" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="TypeScript" value="false" />
      <option name="Vue" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
</templateSet>