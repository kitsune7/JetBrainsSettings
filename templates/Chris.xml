<templateSet group="Chris">
  <template name="html" value="&lt;!doctype html&gt;&#10;&lt;html&gt;&#10;&lt;head lang=&quot;en&quot;&gt;&#10;    &lt;meta charset=&quot;utf-8&quot; /&gt;&#10;    &lt;title&gt;&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="New html5 document" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="reset" value="/* &#10;html5doctor.com Reset Stylesheet&#10;v1.6.1&#10;Last Updated: 2010-09-17&#10;Author: Richard Clark - http://richclarkdesign.com &#10;Twitter: @rich_clark&#10;*/&#10;&#10;html, body, div, span, object, iframe,&#10;h1, h2, h3, h4, h5, h6, p, blockquote, pre,&#10;abbr, address, cite, code,&#10;del, dfn, em, img, ins, kbd, q, samp,&#10;small, strong, sub, sup, var,&#10;b, i,&#10;dl, dt, dd, ol, ul, li,&#10;fieldset, form, label, legend,&#10;table, caption, tbody, tfoot, thead, tr, th, td,&#10;article, aside, canvas, details, figcaption, figure, &#10;footer, header, hgroup, menu, nav, section, summary,&#10;time, mark, audio, video {&#10;    margin:0;&#10;    padding:0;&#10;    border:0;&#10;    outline:0;&#10;    font-size:100%;&#10;    vertical-align:baseline;&#10;    background:transparent;&#10;}&#10;&#10;body {&#10;    line-height:1;&#10;}&#10;&#10;article,aside,details,figcaption,figure,&#10;footer,header,hgroup,menu,nav,section { &#10;    display:block;&#10;}&#10;&#10;nav ul {&#10;    list-style:none;&#10;}&#10;&#10;blockquote, q {&#10;    quotes:none;&#10;}&#10;&#10;blockquote:before, blockquote:after,&#10;q:before, q:after {&#10;    content:'';&#10;    content:none;&#10;}&#10;&#10;a {&#10;    margin:0;&#10;    padding:0;&#10;    font-size:100%;&#10;    vertical-align:baseline;&#10;    background:transparent;&#10;}&#10;&#10;/* change colours to suit your needs */&#10;ins {&#10;    background-color:#ff9;&#10;    color:#000;&#10;    text-decoration:none;&#10;}&#10;&#10;/* change colours to suit your needs */&#10;mark {&#10;    background-color:#ff9;&#10;    color:#000; &#10;    font-style:italic;&#10;    font-weight:bold;&#10;}&#10;&#10;del {&#10;    text-decoration: line-through;&#10;}&#10;&#10;abbr[title], dfn[title] {&#10;    border-bottom:1px dotted;&#10;    cursor:help;&#10;}&#10;&#10;table {&#10;    border-collapse:collapse;&#10;    border-spacing:0;&#10;}&#10;&#10;/* change border colour to suit your needs */&#10;hr {&#10;    display:block;&#10;    height:1px;&#10;    border:0;   &#10;    border-top:1px solid #cccccc;&#10;    margin:1em 0;&#10;    padding:0;&#10;}&#10;&#10;input, select {&#10;    vertical-align:middle;&#10;}" description="CSS Reset" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="true" />
    </context>
  </template>
  <template name="tsx" value="import * as React from 'react'&#10;import $NAME$View from './$NAME$View'&#10;import Model from '../../Model/Model'&#10;import IObserver from '../IObserver'&#10;&#10;&#10;class $NAME$Presenter extends React.Component&lt;React.SFC&lt;{}&gt;&gt; implements IObserver {&#10;  state = {}&#10;&#10;  public constructor(props) {&#10;    super(props)&#10;    Model.get_instance().addObserver(this)&#10;  }&#10;  &#10;  componentWillUnmount () {&#10;    Model.get_instance().removeObserver(this)&#10;  }&#10;&#10;  public update(): void {&#10;    this.setState({})&#10;  }&#10;  &#10;  public render (): JSX.Element {&#10;    return (&#10;      &lt;$NAME$View /&gt;&#10;    )&#10;  } &#10;}&#10;&#10;export default $NAME$Presenter&#10;" description="New presenter" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="model" value="class $NAME$ {&#10;  &#10;}&#10;&#10;export default $NAME$&#10;" description="New model class" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="get" value="public get $VAR$ (): $TYPE$ {&#10;  return this._$VAR$&#10;}&#10;" description="New get method" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="set" value="public set $VAR$ ($VAR$: $TYPE$) {&#10;  this._$VAR$ = $VAR$&#10;}&#10;" description="New set method" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="sg" value="public set $VAR$ ($VAR$: $TYPE$) {&#10;  this._$VAR$ = $VAR$&#10;}&#10;public get $VAR$ (): $TYPE$ {&#10;  return this._$VAR$&#10;}&#10;" description="A setter and getter method back to back" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="mem" value="private _$VAR$: $TYPE$&#10;" description="New private member" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fc" value="import * as React from 'react'&#10;&#10;&#10;const $NAME$View = (): JSX.Element =&gt; (&#10;  $JSX$&#10;)&#10;&#10;export default $NAME$View&#10;" description="Functional Component" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="JSX" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="for" value="for (let i: number = 0; i &lt; $SOMETHING$.length; ++i) {&#10;  &#10;}" description="Typescript for loop" toReformat="false" toShortenFQNames="true">
    <variable name="SOMETHING" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="css" value="import './$NAME$View.css'" description="import css file" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="inter" value="interface $NAME$ {&#10;    $PROPERTIES$&#10;}&#10;&#10;export default $NAME$&#10;" description="interface" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PROPERTIES" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cc" value="import React, { Component } from 'react'&#10;import PropTypes from 'prop-types'&#10;&#10;import styles from './style'&#10;&#10;class $NAME$ extends Component {&#10;  static propTypes = {&#10;    style: PropTypes.object&#10;  }&#10;&#10;  render () {&#10;    return (&#10;      &#10;    )&#10;  }&#10;}&#10;&#10;export default $NAME$" description="Common component" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rnstyle" value="import { StyleSheet } from 'react-native'&#10;//import {  } from '../colors'&#10;&#10;const styles = StyleSheet.create({&#10;  &#10;})&#10;&#10;export default styles&#10;" description="React native stylesheet" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>